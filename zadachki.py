1)Число делится на 6 только в случае соблюдения двух условий: последняя его цифра четная, а сумма всех цифр делится на 3.
Напишите функцию is_divisible_by_6(number), которая возвращает «Число Х делится на 6» или «Число Х неделимо на 6» в зависимости от того, можно ли его разделить на 6. 
В качестве аргумента может быть передано любое целое число.

def is_divisible_by_6(number):
    lst_str_digits = list(str(abs(number)))
    lst_digits = list(map(int, lst_str_digits)) Вместо мэпа юзани цикл
    sum_digits = sum(lst_digits)
    if (sum_digits % 3 == 0) and (lst_digits[-1] % 2 == 0):
        return f'Число {number} делится на 6'
    else:
        return f'Число {number} неделимо на 6'

2)
Евгению предоставили строку, состоящую из русских букв разных регистров, и попросили очистить ее от заглавных литер. 
Как ему показалось, он написал верный код, но результат совсем не порадовал. 
Ниже представлен пример работы «чистильщика строк», которому срочно требуется ваша помощь.

letters = 'ЫгВЫоЯСремДШНККАыкЩЙФа'
clean_string = ''
for letter in letters:
    if not letter.isupper():
        clean_string += letter
letters = clean_string
print(letters)


3)
Составьте код которая принимает номер месяца вашего рождения и в зависимости от сезона печатает на выходе следующее:
«Вы родились в <НАЗВАНИЕ_МЕСЯЦА>. <ОПИСАНИЕ_СОБЫТИЙ>».

В качестве ОПИСАНИЯ_СОБЫТИЙ будет характеристика сезона: 
- для зимы «За окном падал белый снег»,
- для весны «Птицы пели прекрасные песни»,
- для лета «Солнце светило ярче чем когда-либо»,
- для осени «Урожай был невероятным».

Важно учесть, что пользователи могут ввести любой тип данных в качестве аргумента (не попадитесь на этом и предупредите о том, что «Требуется ввести реальный номер месяца»).

решения!

months = {
        1: 'Январе',
        2: 'Феврале',
        3: 'Марте',
        4: 'Апреле',
        5: 'Мае',
        6: 'Июне',
        7: 'Июле',
        8: 'Августе',
        9: 'Сентябре',
        10: 'Октябре',
        11: 'Ноябре',
        12: 'Декабре'
    }


def season_events(number_of_month):
   if not isinstance(number_of_month, int) and 1 <= number_of_month <= 12:
        print('Требуется ввести реальный номер месяца')
	      return
   if number_of_month in range(3, 6):
    print(f'Вы родились в {months[number_of_month]}. Птицы пели прекрасные песни')
   elif number_of_month in range(6, 9):
     print(f'Вы родились в {months[number_of_month]}. Солнце светило ярче чем когда-либо')
   elif number_of_month in range(9, 12):
     print(f'Вы родились в {months[number_of_month]}. Урожай был невероятным')
   else:
        print(f'Вы родились в {months[number_of_month]}. За окном падал белый снег')

# Тесты
season_events(33)
season_events('wq')
season_events(1)
season_events(7)
season_events(10)
season_events(5)

4)
Анна решила представить некую таблицу с заглавными и строчными буквами русского алфавита в красивом формате. 
Об этом ее попросили англоязычные друзья из социальных сетей.

Недолго думая девушка создала скрипт, который выполнял подобную операцию. 
Результат работы программы продемонстрирован ниже. 
Сможете повторить (в строках с галочками - их 27 штук, чтобы вам не пришлось долго считать)? Для идентичности результатов примените любой моноширинный шрифт (в котором все символы имеют одинаковую ширину).

Результат:
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  А а  ||  К к  ||  Х х  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Б б  ||  Л л  ||  Ц ц  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  В в  ||  М м  ||  Ч ч  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Г г  ||  Н н  ||  Ш ш  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Д д  ||  О о  ||  Щ щ  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Е е  ||  П п  ||  Ъ ъ  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Ё ё  ||  Р р  ||  Ы ы  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Ж ж  ||  С с  ||  Ь ь  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  З з  ||  Т т  ||  Э э  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  И и  ||  У у  ||  Ю ю  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^
|  Й й  ||  Ф ф  ||  Я я  |
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Решение!
rus_lower = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
for position in range(11):
    print('^' * 27)
    for letter in rus_lower:
        if rus_lower.index(letter) % 11 == position:
            print('| ', letter.upper(), letter, ' |', end='')
    print()
print('^' * 27)

